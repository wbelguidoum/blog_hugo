<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Broken Backend</title>
    <link>https://brokenbackend.blog/post/</link>
    <description>Recent content in Posts on Broken Backend</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>wissem@brokenbackend.blog (Wissem)</managingEditor>
    <webMaster>wissem@brokenbackend.blog (Wissem)</webMaster>
    <lastBuildDate>Sun, 30 Aug 2020 00:00:00 +0100</lastBuildDate>
    <atom:link href="https://brokenbackend.blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to optimise loading partitioned JSON data in Spark ?</title>
      <link>https://brokenbackend.blog/post/20200830_spark_load_partitioned_json/</link>
      <pubDate>Sun, 30 Aug 2020 00:00:00 +0100</pubDate><author>wissem@brokenbackend.blog (Wissem)</author>
      <guid>https://brokenbackend.blog/post/20200830_spark_load_partitioned_json/</guid>
      <description>&lt;p&gt;In this tutorial we will explore ways to optimise loading partitioned JSON data in Spark.&lt;/p&gt;&#xA;&lt;p&gt;I have used the SF Bay Area Bike Share dataset, you can find it &lt;a href=&#34;https://www.kaggle.com/benhamner/sf-bay-area-bike-share/data#&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;. The original data (&lt;em&gt;status.csv&lt;/em&gt;) have gone through few transformations. The result looks like:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to add row numbers to a Spark DataFrame?</title>
      <link>https://brokenbackend.blog/post/20200820_spark_rows_number/</link>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0100</pubDate><author>wissem@brokenbackend.blog (Wissem)</author>
      <guid>https://brokenbackend.blog/post/20200820_spark_rows_number/</guid>
      <description>&lt;p&gt;In this tutorial, we will explore a couple of ways to add a sequential consecutive row number to a dataframe.&lt;/p&gt;&#xA;&lt;p&gt;For example, let this be our dataframe (taken from &lt;a href=&#34;https://github.com/databricks/Spark-The-Definitive-Guide&#34;&gt;&lt;strong&gt;Spark: The Definitive Guide github repo&lt;/strong&gt;&lt;/a&gt;):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Spark DataFrame - two ways to count the number of rows per partition</title>
      <link>https://brokenbackend.blog/post/20200814_spark_count_per_partition/</link>
      <pubDate>Sat, 15 Aug 2020 00:00:00 +0100</pubDate><author>wissem@brokenbackend.blog (Wissem)</author>
      <guid>https://brokenbackend.blog/post/20200814_spark_count_per_partition/</guid>
      <description>&lt;p&gt;Sometimes, we are required to compute the number of rows per each partition. To do this, there are two ways:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The first way is using &lt;code&gt;Dataframe.mapPartitions()&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;The second way (the faster according to my observations) is using the &lt;code&gt;spark_partition_id()&lt;/code&gt; function, followed by a grouping count aggregation.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
